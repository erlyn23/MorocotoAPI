// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Morocoto.Domain.DbContexts;

namespace Morocoto.Infraestructure.Migrations
{
    [DbContext(typeof(MorocotoDbContext))]
    partial class MorocotoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Morocoto.Domain.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Business")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Business");

                    b.Property<decimal?>("BusinessCreditAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(13,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("BusinessNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BusinessTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("PartnerId");

                    b.HasIndex(new[] { "BusinessNumber" }, "Business_BusinessNumber_idx")
                        .IsUnique()
                        .HasFilter("[BusinessNumber] IS NOT NULL");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Street2")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id", "BusinessId")
                        .HasName("BusinessAddresses_pk");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessAddresses");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<string>("PathFile")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessBills");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id", "BusinessId")
                        .HasName("BusinessPhoneNumbers_pk");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessPhoneNumbers");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessType1")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("BusinessType");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusinessType1" }, "BusinessType_idx")
                        .IsUnique()
                        .HasFilter("[BusinessType] IS NOT NULL");

                    b.ToTable("BusinessTypes");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BuyCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditBought")
                        .HasColumnType("decimal(13,2)");

                    b.Property<DateTime>("CreditBoughtDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerTaxId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id", "BusinessId", "CustomerId")
                        .HasName("BuyCredits_Pk");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerTaxId");

                    b.HasIndex("PartnerId");

                    b.ToTable("BuyCredits");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.CustomerTaxis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(13,2)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTaxes");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserDevice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestStateId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedCredit")
                        .HasColumnType("decimal(13,2)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("RequestStateId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.RequestState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestState1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RequestState");

                    b.HasKey("Id");

                    b.ToTable("RequestStates");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.SecurityQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SecurityQuestion1")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("SecurityQuestion");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SecurityQuestion1" }, "SecurityQuestions_idx")
                        .IsUnique()
                        .HasFilter("[SecurityQuestion] IS NOT NULL");

                    b.ToTable("SecurityQuestions");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerSenderId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerRecieverId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal>("CreditTransfered")
                        .HasColumnType("decimal(13,2)");

                    b.Property<int>("CustomerTaxesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.HasKey("Id", "CustomerSenderId", "CustomerRecieverId")
                        .HasName("Transactions_pk");

                    b.HasIndex("CustomerRecieverId");

                    b.HasIndex("CustomerSenderId");

                    b.HasIndex("CustomerTaxesId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdentificationDocument")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("OsPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PIN");

                    b.Property<string>("SecurityAnswer")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("SecurityQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityQuestionId");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "Email" }, "User_Email_idx")
                        .IsUnique();

                    b.HasIndex(new[] { "IdentificationDocument" }, "User_IdentificationDocument_idx")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Street2")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id", "UserId")
                        .HasName("UserAddresses_pk");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.UserPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id", "UserId")
                        .HasName("UserPhoneNumbers_pk");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhoneNumbers");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserType1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("UserType");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserType1" }, "UserType_idx")
                        .IsUnique()
                        .HasFilter("[UserType] IS NOT NULL");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Business", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.BusinessType", "BusinessType")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("Business_BusinessTypeId_fk")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.Partner", "Partner")
                        .WithMany("Businesses")
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("Business_partnerId_fk")
                        .IsRequired();

                    b.Navigation("BusinessType");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessAddress", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.Business", "Business")
                        .WithMany("BusinessAddresses")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("BusinessAddresses_BusinessId_fk")
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessBill", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.Business", "Business")
                        .WithMany("BusinessBills")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("BusinessBills_BusinessId_fk")
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessPhoneNumber", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.Business", "Business")
                        .WithMany("BusinessPhoneNumbers")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("BusinessPhoneNumbers_BusinessId_fk")
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BuyCredit", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.Business", "Business")
                        .WithMany("BuyCredits")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("BuyCredits_Business_Fk")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.Customer", "Customer")
                        .WithMany("BuyCredits")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("BuyCredits_Customers_Fk")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.CustomerTaxis", "CustomerTax")
                        .WithMany("BuyCredits")
                        .HasForeignKey("CustomerTaxId")
                        .HasConstraintName("BuyCredits_CustomerTaxesId")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.Partner", null)
                        .WithMany("BuyCredits")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Business");

                    b.Navigation("Customer");

                    b.Navigation("CustomerTax");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Customer", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.User", "IdNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("Morocoto.Domain.Models.Customer", "Id")
                        .HasConstraintName("Customers_UserId_FK")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Partner", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.User", "IdNavigation")
                        .WithOne("Partner")
                        .HasForeignKey("Morocoto.Domain.Models.Partner", "Id")
                        .HasConstraintName("Partner_UserId_FK")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Request", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.Business", "Business")
                        .WithMany("Requests")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("RequestStates_BusinessId_fk")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.RequestState", "RequestState")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStateId")
                        .HasConstraintName("Requests_RequestStates_Fk")
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("RequestState");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Transaction", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.Customer", "CustomerReciever")
                        .WithMany("TransactionCustomerRecievers")
                        .HasForeignKey("CustomerRecieverId")
                        .HasConstraintName("Transactions_CustomerRecieverId_fk")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.Customer", "CustomerSender")
                        .WithMany("TransactionCustomerSenders")
                        .HasForeignKey("CustomerSenderId")
                        .HasConstraintName("Transactions_CustomerSenderId_fk")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.CustomerTaxis", "CustomerTaxes")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerTaxesId")
                        .HasConstraintName("ConfirmationNumber")
                        .IsRequired();

                    b.Navigation("CustomerReciever");

                    b.Navigation("CustomerSender");

                    b.Navigation("CustomerTaxes");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.User", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.SecurityQuestion", "SecurityQuestion")
                        .WithMany("Users")
                        .HasForeignKey("SecurityQuestionId")
                        .HasConstraintName("User_SecurityQuestion_FK")
                        .IsRequired();

                    b.HasOne("Morocoto.Domain.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("User_UserType_FK")
                        .IsRequired();

                    b.Navigation("SecurityQuestion");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.UserAddress", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserAddresses_UserId_fk")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.UserPhoneNumber", b =>
                {
                    b.HasOne("Morocoto.Domain.Models.User", "User")
                        .WithMany("UserPhoneNumbers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserPhoneNumbers_UserId_FK")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Business", b =>
                {
                    b.Navigation("BusinessAddresses");

                    b.Navigation("BusinessBills");

                    b.Navigation("BusinessPhoneNumbers");

                    b.Navigation("BuyCredits");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.BusinessType", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Customer", b =>
                {
                    b.Navigation("BuyCredits");

                    b.Navigation("TransactionCustomerRecievers");

                    b.Navigation("TransactionCustomerSenders");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.CustomerTaxis", b =>
                {
                    b.Navigation("BuyCredits");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.Partner", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("BuyCredits");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.RequestState", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.SecurityQuestion", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Partner");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPhoneNumbers");
                });

            modelBuilder.Entity("Morocoto.Domain.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
